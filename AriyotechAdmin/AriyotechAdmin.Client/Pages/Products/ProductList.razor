@page "/Product-List"
@inject HttpClient _httpClient
<PageTitle>Produc tList</PageTitle>
<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
  
<MudGrid>
            <MudItem xs="6" sm="6" md="3" lg="3" xl="3">
                <div style="height:contain; width:contain;">
                <MudPaper Elevation="0" Class="ma-2 rounded-lg" Outlined="true">
                        <MudStack Justify="Justify.SpaceBetween" Row="true">
                            <div class="d-flex flex-column">
                                <MudText GutterBottom="true"> In-store Sales  </MudText>
                            <MudText GutterBottom="true"> $5,345.43 </MudText>
                            <div class="d-flex flex-row  gap-4">
                                    <MudText> 5k orders </MudText>
                                    <MudText>+5.7%</MudText>
                                </div>
                              
                            </div>
                            <div class="d-flex justify-end">
                                <MudIcon Icon="@Icons.Custom.Uncategorized.FoodApple"></MudIcon>
                            </div>
                        </MudStack>
                    </MudPaper>
                </div>

            </MudItem>
        <MudItem xs="6" sm="6" md="3" lg="3" xl="3">
            <div style="height:contain; width:contain;">
                <MudPaper Elevation="0" Class="ma-2 rounded-lg" Outlined="true">
                    <MudStack Justify="Justify.SpaceBetween" Row="true">
                        <div class="d-flex flex-column">
                            <MudText GutterBottom="true"> In-store Sales  </MudText>
                            <MudText GutterBottom="true"> $5,345.43 </MudText>
                            <div class="d-flex flex-row  gap-4">
                                <MudText> 5k orders </MudText>
                                <MudText>+5.7%</MudText>
                            </div>

                        </div>
                        <div class="d-flex justify-end">
                            <MudIcon Icon="@Icons.Custom.Uncategorized.FoodApple"></MudIcon>
                        </div>
                    </MudStack>
                </MudPaper>
            </div>

        </MudItem>
        <MudItem xs="6" sm="6" md="3" lg="3" xl="3">
            <div style="height:contain; width:contain;">
                <MudPaper Elevation="0" Class="ma-2 rounded-lg" Outlined="true">
                    <MudStack Justify="Justify.SpaceBetween" Row="true">
                        <div class="d-flex flex-column">
                            <MudText GutterBottom="true"> In-store Sales  </MudText>
                            <MudText GutterBottom="true"> $5,345.43 </MudText>
                            <div class="d-flex flex-row  gap-4">
                                <MudText> 5k orders </MudText>
                                <MudText>+5.7%</MudText>
                            </div>

                        </div>
                        <div class="d-flex justify-end">
                            <MudIcon Icon="@Icons.Custom.Uncategorized.FoodApple"></MudIcon>
                        </div>
                    </MudStack>
                </MudPaper>
            </div>

        </MudItem>
        <MudItem xs="6" sm="6" md="3" lg="3" xl="3">
            <div style="height:contain; width:contain;">
                <MudPaper Elevation="0" Class="ma-2 rounded-lg" Outlined="true">
                    <MudStack Justify="Justify.SpaceBetween" Row="true">
                        <div class="d-flex flex-column">
                            <MudText GutterBottom="true"> In-store Sales  </MudText>
                            <MudText GutterBottom="true"> $5,345.43 </MudText>
                            <div class="d-flex flex-row  gap-4">
                                <MudText> 5k orders </MudText>
                                <MudText>+5.7%</MudText>
                            </div>

                        </div>
                        <div class="d-flex justify-end">
                            <MudIcon Icon="@Icons.Custom.Uncategorized.FoodApple"></MudIcon>
                        </div>
                    </MudStack>
                </MudPaper>
            </div>

        </MudItem>       
</MudGrid>
    <MudPaper Class="mt-4 mb-4 ">
        <MudToolBar WrapContent="true" DisableGutters="true"  Class="d-flex justify-space-between">
            <MudSelect Class="ma-2" Margin="Margin.Dense" T="string" Label="Status " Variant="Variant.Outlined">
                <MudSelectItem Value="@("Tyrannosaur")" />
                <MudSelectItem Value="@("Triceratops")" />
                <MudSelectItem Value="@("Henon Rex")" />
            </MudSelect>
            <MudSelect Class="ma-2" Margin="Margin.Dense" T="string" Label="Category" Variant="Variant.Outlined">
                <MudSelectItem Value="@("Tyrannosaur")" />
                <MudSelectItem Value="@("Triceratops")" />
                <MudSelectItem Value="@("Henon Rex")" />
            </MudSelect>
            <MudSelect Class="ma-2" Margin="Margin.Dense" T="string" Label="Stock" Variant="Variant.Outlined">
                <MudSelectItem Value="@("Tyrannosaur")" />
                <MudSelectItem Value="@("Triceratops")" />
                <MudSelectItem Value="@("Henon Rex")" />
            </MudSelect>
        </MudToolBar>
    </MudPaper>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<Element>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Periodic Elements</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="nr_field" T="Element">Nr</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="sign_field" T="Element">Sign</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="Element">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="position_field" T="Element">Position</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="mass_field" T="Element">Molar mass</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Number</MudTd>
            <MudTd DataLabel="Sign">@context.Sign</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Position">@context.Position</MudTd>
            <MudTd DataLabel="Molar mass">@context.Molar</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</MudContainer>
@code {
    private IEnumerable<Element> pagedData;
    private MudTable<Element> table;

    private int totalItems;
    private string searchString = null;

    private async Task<TableData<Element>> ServerReload(TableState state)
    {
        IEnumerable<Element> data = new List<Element> ();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Number);
                break;
            case "sign_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Sign);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "position_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Position);
                break;
            case "mass_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Molar);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Element>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    public class Element
    {
        public int Number { get; set; }
        public string Sign { get; set; }
        public string Name { get; set; }
        public string Position { get; set; }
        public string Molar { get; set; }
    }
}
